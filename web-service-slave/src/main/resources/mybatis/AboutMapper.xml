<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bigdata.web.dao.AboutMapper" >
  <resultMap id="BaseResultMap" type="com.bigdata.web.domain.About" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="zip_code" property="zipCode" jdbcType="VARCHAR" />
    <result column="work_time" property="workTime" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.bigdata.web.domain.About" extends="BaseResultMap" >
    <result column="desrc" property="desrc" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, address, phone, zip_code, work_time
  </sql>
  <sql id="Blob_Column_List" >
    desrc
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from about
    where id = #{id,jdbcType=INTEGER}
  </select>
    <select id="select" resultType="com.bigdata.web.domain.About">
      SELECT  * from about limit 1
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from about
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bigdata.web.domain.About" >
    insert into about (id, address, phone, 
      zip_code, work_time, desrc
      )
    values (#{id,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{zipCode,jdbcType=VARCHAR}, #{workTime,jdbcType=VARCHAR}, #{desrc,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.bigdata.web.domain.About" >
    insert into about
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="zipCode != null" >
        zip_code,
      </if>
      <if test="workTime != null" >
        work_time,
      </if>
      <if test="desrc != null" >
        desrc,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="zipCode != null" >
        #{zipCode,jdbcType=VARCHAR},
      </if>
      <if test="workTime != null" >
        #{workTime,jdbcType=VARCHAR},
      </if>
      <if test="desrc != null" >
        #{desrc,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bigdata.web.domain.About" >
    update about
    <set >
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="zipCode != null" >
        zip_code = #{zipCode,jdbcType=VARCHAR},
      </if>
      <if test="workTime != null" >
        work_time = #{workTime,jdbcType=VARCHAR},
      </if>
      <if test="desrc != null" >
        desrc = #{desrc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.bigdata.web.domain.About" >
    update about
    set address = #{address,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      zip_code = #{zipCode,jdbcType=VARCHAR},
      work_time = #{workTime,jdbcType=VARCHAR},
      desrc = #{desrc,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bigdata.web.domain.About" >
    update about
    set address = #{address,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      zip_code = #{zipCode,jdbcType=VARCHAR},
      work_time = #{workTime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>